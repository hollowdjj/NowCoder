package codetop

/*
下一个排列
整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。

例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。
整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。

例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。
类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。
而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。
给你一个整数数组 nums ，找出 nums 的下一个排列。
*/

func nextPermutation(nums []int) {
	// 例如 2, 6, 3, 5, 4, 1 这个排列，我们想要找到下一个刚好比他大的排列，于是可以从后往前看。
	//我们先看后两位 4, 1 能否组成更大的排列，答案是不可以，同理 5, 4, 1也不可以 直到3, 5, 4, 1
	//这个排列，因为 3 < 5， 我们可以通过重新排列这一段数字，来得到下一个排列 因为我们需要使得新的
	//排列尽量大，所以我们从后往前找第一个比3更大的数字，发现是4 然后，我们调换3和4的位置，得到4, 5, 3, 1
	//这个数列 因为我们需要使得新生成的数列尽量小，于是我们可以对5, 3, 1进行排序，可以发现在这个算法中，我
	//们得到的末尾数字一定是倒序排列的，于是我们只需要把它反转即可 最终，我们得到了4, 1, 3, 5这个数列 完整
	//的数列则是2, 6, 4, 1, 3, 5。

	//从后往前找到第一个升序对{i,i+1}并且nums[i] < nums[i+1]
	i := len(nums) - 2
	for ; i >= 0; i-- {
		if nums[i] < nums[i+1] {
			break
		}
	}
	if i >= 0 {
		//从后往前，找到第一个大于nums[i]的数字nums[j]，交换nums[i]和nums[j]
		for j := len(nums) - 1; j > i; j-- {
			if nums[j] > nums[i] {
				nums[i], nums[j] = nums[j], nums[i]
				break
			}
		}
	}
	//将nums[i+1:]按照升序排序。由于nums[i+1:]本身是降序排序的，所以交换即可
	reverse(nums[i+1:])
}

func reverse(nums []int) {
	left, right := 0, len(nums)-1
	for left < right {
		nums[left], nums[right] = nums[right], nums[left]
		left++
		right--
	}
}

//上一个排列
func prevPermutation(nums int) {
	//对于序列4,6,8,1,2,9而言。2,9没法变为更小的排列；1，2，9也没法变为更小的排列，而8,1可以变成
	//更小排列1,8。因此，需要先从后往前遍历找到第一个逆序对{i,i+1} nums[i] > nums[i+1]。然后从
	//nums[i+1:]中找到第一个大于nums[i]的数并交换得，4，6，9，1，2，8。然后将nums[i+1:]逆序排
	//序，得到4,6,9,8,2,1
}
