package others

/*
回文数字
在不使用额外的内存空间的条件下判断一个整数是否是回文。回文指逆序和正序完全相同。

数据范围：-2^31 ≤ n ≤ 2^31 -1

提示：
负整数可以是回文吗？（比如-1）
如果你在考虑将数字转化为字符串的话，请注意一下不能使用额外空间的限制
你可以将整数翻转。但是，如果你做过题目“反转数字”，你会知道将整数翻转可能会出现溢出的情况，你怎么处理这个问题？
*/

func IsPalindrome(x int) bool {
	//可以使用int64来避免反转数字过程中造成的溢出。也可以用题目“反转数字”中的判断溢出的方法
	temp := x
	res := 0
	for x > 0 {
		res = res*10 + x%10
		x /= 10
	}
	return res == temp
}

func IsPalindromeAdvance(x int) bool {
	//我们希望的是能够像字符串那样，利用双指针判断首尾数字是否相等
	//然而，这里是数字，不是字符串，将数字转换成字符串又会导致额外的
	//空间复杂度。以1221为例，1221/10 = 1，而1221/1000=1，即可以通过
	//这种方法找到数字的首尾数字
	if x < 0 {
		//负数不是回文数字
		return false
	}

	//例如1221是四位数字，那么div=1000
	div := 1
	for x/div >= 10 {
		div *= 10
	}

	for x > 0 {
		left := x / div //最高位
		right := x % 10 //最低位
		if left != right {
			return false
		}
		x = (x % div) / 10 //1221变成22
		div /= 100         //少了两位，所以除100
	}

	return true
}
