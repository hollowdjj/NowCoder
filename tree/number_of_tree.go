package tree

/*
二叉树的个数
已知一棵节点个数为 n 的二叉树的中序遍历单调递增, 求该二叉树能能有多少种树形, 输出答案对10^9 + 7取模
数据范围：1≤n≤3000
进阶：空间复杂度O(1)，时间复杂度O(nlogn)
*/

func NumberOfNode(n int) int {
	//例如[0,1,2,3,4,5]。数组中的每一个数字都可以作为根节点。因此，我们可以考虑使用
	//动态规划进行求解。dp[i]表示节点个数为i时的二叉树个数。那么当以第j(0≤j﹤i)个元素
	//作为根节点时，其左边有j个数字，右边有i-1-j个数字，显然状态转移方程为：
	//       dp[i] = ∑(dp[j]*dp[i-1-1])其中(0≤j﹤i)
	if n <= 2 {
		return n
	}
	dp := make([]int, n+1)
	dp[0] = 1
	dp[1] = 1
	dp[2] = 2
	for i := 3; i <= n; i++ {
		count := 0
		for j := 0; j < i; j++ {
			count += (dp[j] * dp[i-1-j]) % 1000000007
		}
		dp[i] = count % 1000000007
	}
	return dp[n]
}
